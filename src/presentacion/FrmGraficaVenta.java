
package presentacion;

import database.Conexion;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

/**
 *
 * @author steff
 */
public class FrmGraficaVenta extends javax.swing.JInternalFrame {

      ArrayList<String> fechas = new ArrayList<>();
    ArrayList<Integer> compras = new ArrayList<>();
    ArrayList<Integer> ventas = new ArrayList<>();

    public FrmGraficaVenta() {
        initComponents();
        setSize(new Dimension(800, 600));
        setTitle("Gráfico de Compras y Ventas");
        setClosable(true);
        setIconifiable(true);
        setResizable(true);
        cargarDatos();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setTitle("Graficas");

        jLabel1.setText("Súper Grafica");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(283, 283, 283)
                .addComponent(jLabel1)
                .addContainerGap(325, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1)
                .addContainerGap(370, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
     private void cargarDatos() {
        try (Connection cn = Conexion.getInstancia().conectar()) {
            String sql = "SELECT fecha, tipo_transaccion, COUNT(*) as total FROM transaccion "
                       + "WHERE fecha BETWEEN ? AND ? GROUP BY fecha, tipo_transaccion";
            PreparedStatement pst = cn.prepareStatement(sql);
            pst.setString(1, FrmRegistrosVentas.fecha_inicio);
            pst.setString(2, FrmRegistrosVentas.fecha_fin);
            ResultSet rs = pst.executeQuery();

            while (rs.next()) {
                String fecha = rs.getString("fecha");
                String tipo = rs.getString("tipo_transaccion");
                int total = rs.getInt("total");

                if (!fechas.contains(fecha)) {
                    fechas.add(fecha);
                    compras.add(0);
                    ventas.add(0);
                }

                int index = fechas.indexOf(fecha);
                if ("compra".equalsIgnoreCase(tipo)) {
                    compras.set(index, total);
                } else if ("venta".equalsIgnoreCase(tipo)) {
                    ventas.set(index, total);
                }
            }

        } catch (Exception e) {
            System.out.println("Error al cargar datos: " + e.getMessage());
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);

        if (fechas.isEmpty()) {
            g.setColor(Color.RED);
            g.drawString("No hay datos disponibles para graficar.", 100, 100);
            return;
        }

        int y = 100;
        int max = Math.max(compras.stream().max(Integer::compareTo).orElse(1),
                           ventas.stream().max(Integer::compareTo).orElse(1));

        for (int i = 0; i < fechas.size(); i++) {
            int compBar = compras.get(i) * 300 / max;
            int ventBar = ventas.get(i) * 300 / max;

            g.setColor(Color.GREEN);
            g.fillRect(150, y, compBar, 20);
            g.setColor(Color.BLUE);
            g.fillRect(150, y + 25, ventBar, 20);

            g.setColor(Color.BLACK);
            g.drawString(fechas.get(i), 10, y + 15);
            g.drawString("Compra: " + compras.get(i), 460, y + 15);
            g.drawString("Venta: " + ventas.get(i), 460, y + 40);

            y += 60;
        }
    }
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
}
